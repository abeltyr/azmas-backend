// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName     String?       @db.VarChar(255)
  phoneNumber  String        @unique @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  userName     String        @unique @db.VarChar(255)
  bio          String?       @db.Text
  gender       String?       @db.VarChar(255)
  birthDate    DateTime?
  instagram    String?       @db.VarChar(255)
  twitter      String?       @db.VarChar(255)
  telegram     String?       @db.VarChar(255)
  facebook     String?       @db.VarChar(255)
  verified     Boolean       @default(false)
  activated    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  deleteDate   DateTime?
  Groups       Group[]
  GroupMembers GroupMember[]
  events       Event[]
  tickets      Ticket[]
}

model Group {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupName    String        @unique @db.VarChar(255)
  user         User          @relation(fields: [ownerId], references: [id])
  ownerId      String        @db.Uuid
  title        String?       @db.VarChar(255)
  description  String?       @db.Text
  public       Boolean       @default(true)
  activated    Boolean       @default(false)
  verified     Boolean       @default(false)
  influencer   Boolean       @default(false)
  category     String?       @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deleted      Boolean       @default(false)
  deleteDate   DateTime?
  GroupMembers GroupMember[]
  events       Event[]
  tickets      Ticket[]
}

model GroupMember {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  group      Group     @relation(fields: [groupId], references: [id])
  groupId    String    @db.Uuid
  admin      Boolean   @default(false)
  banned     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deleteDate DateTime?
}

model Event {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User      @relation(fields: [creatorId], references: [id])
  creatorId      String    @db.Uuid
  group          Group     @relation(fields: [groupId], references: [id])
  groupId        String    @db.Uuid
  title          String?   @db.VarChar(255)
  description    String?   @db.Text
  horizontal     Boolean   @default(true)
  //Todo: add the array of image
  eventStartDate DateTime
  eventEndDate   DateTime
  category       String?   @db.VarChar(255)
  location       String?   @db.VarChar(255)
  price          Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        Boolean   @default(false)
  deleteDate     DateTime?
  tickets        Ticket[]
}

model Ticket {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  group      Group     @relation(fields: [groupId], references: [id])
  groupId    String    @db.Uuid
  event      Event     @relation(fields: [eventId], references: [id])
  eventId    String    @db.Uuid
  price      Float
  used       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deleteDate DateTime?
}

model UploadFile {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String    @db.VarChar(255)
  alternativeName String?   @db.VarChar(255)
  ext             String?   @db.VarChar(255)
  url             String    @db.VarChar(255)
  previewUrl      String?   @db.VarChar(255)
  mime            String?   @db.VarChar(255)
  size            Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deleted         Boolean   @default(false)
  deleteDate      DateTime?
}

model UploadFileRelation {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tableId    String    @db.Uuid
  fileId     String    @db.Uuid
  tableType  String    @db.VarChar(255)
  Field      String    @db.VarChar(255)
  order      Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deleteDate DateTime?
}

model UserPassword {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  hash         String   @db.Text
  order        Int      @default(0)
  changeReason String?  @db.VarChar(255)
  device       String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  token     String   @db.Text
  Endperiod DateTime
  active    Boolean  @default(true)
  device    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotenPassword {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  code      String   @db.VarChar(255)
  used      Boolean  @default(true)
  device    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
